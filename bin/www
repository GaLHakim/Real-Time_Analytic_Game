#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('analyticgame:server');
var http = require('http');
var db = require('../models');
var Activity = db.Activity;
var Project = db.Project;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//#region Socket IO
const formatMessage = require('../public/js/cloud/activity/formatMessage');
const { userJoin, getCurrentUser } = require('../public/js/cloud/activity/users');
const socketIo = require('socket.io');
io = socketIo(server);

// var clients = [];
io.on('connection', (socket) => {

  socket.on('Join Room', room =>{
    const user = userJoin(socket.id, room);
    socket.join(user.room);
    console.log({
      success: 'server room Join Room',
      message: user.room
    })
  })

  socket.on('User Connect', (dataConnect) => {
    console.log('User Connect ' + socket.id + dataConnect);
    Project
    .findOne({
      where:{
        id: dataConnect.ProjectId
      },
      attributes:[
        'DeveloperId'
      ]
    })
    .then(data => {
      metaDevId = data.DeveloperId;
      const user = userJoin(socket.id, metaDevId);
      socket.join(user.room);
      console.log({
        success: 'room User Connect',
        message: user.room
        })
    })
    .catch(err => {
      console.log({
        error: true,
        message: 'error socket join : '+err
      })
    })
  });

  socket.on('Action', (dataAction) => {
    console.log(dataAction);
    Project
    .findOne({
      where:{
        id: dataAction.ProjectId
      },
      attributes:[
        'project_name'
      ]
    })
    .then(data => {
      metaProjectName = data.project_name;
      const user = getCurrentUser(socket.id)
      io.to(user.room).emit('LogAction', formatMessage(metaProjectName, dataAction.object_name));
      console.log({
        success: 'room Action',
        message: user.room
      })
    })
    .catch(err => {
      console.log({
        error: true,
        message: 'error then data : '+err
      })
    })
    activity(dataAction);
  });

  socket.on('disconnect', () => {
    console.log('User disconnect is', socket.id);
  });

});
//#endregion

//#region Pusher
const Pusher = require('pusher');
const keys = require('../config/pusherKeys');

function activity(dataAction){
    var pusher = new Pusher({
      appId: keys.pusherAppId,
      key: keys.pusherKey,
      secret: keys.pusherSecret,
      cluster: keys.pusherCluster,
      encrypted: keys.pusherEncrypted
    });

    const dataAct = {
      object_name: dataAction.object_name,
      ProjectId: dataAction.ProjectId,
      EventTypeId: dataAction.EventTypeId
    }

    Activity
    .create(dataAct)
    .then(() => {
      pusher.trigger('active', 'active-e', {
        points: 1,
        object_name:dataAct.object_name
      });
      console.log({
        status: 'succes',
        message: 'dataAct Create',
        data: dataAct
      });
    })
    .catch(err => {
      console.log({
        error: true,
        message: 'error create : ' + err
      })
    })
}
//#endregion

/**
 * Listen on provided port, on all network interfaces.
 */
db.sequelize.sync().then(() => {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
