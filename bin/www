#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('knex-nodejs:server');
const http = require('http');
const db = require('../models');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

//#region Socket IO
const socketIo = require('socket.io');
io = socketIo(server);

// var clients = [];
io.on('connection', (socket) => {
  // console.log('New WS Connection...');

  // socket.emit('message', 'Welcom to Service!');

  // socket.broadcast.emit('message', 'A user joined');

  // socket.on('disconnect', () => {
  //   io.emit('message', 'A user disconnect');
  // });

  socket.on('User Connect', () => {
    console.log('User Connect ' + socket.id);
    // for(var i = 0; i < clients.length; i++){
    //   // socket.emit('User Connected', {item:clients[i]});
    //   console.log('User Connected is ' + clients[i] , socket.id);
    // }
  });

  var currentUserData;
  socket.on('Action', (data) => {
    console.log(data);
    // activity(data);
    currentUserData = {
      item:data.object_name
    }

    // clients.push(currentUserData);
    // socket.emit('Action', currentUserData);
    // socket.broadcast.emit('User Connected', currentUserData);
    io.emit('User Connected', currentUserData);
  });

  socket.on('disconnect', () => {
    console.log('User disconnect is', socket.id);
    // socket.emit('User Disconnected', socket.id);
  });
});
//#endregion

//#region Pusher
const Pusher = require('pusher');
const Activity = require('../models').Activity;
const Project = require('../models').Project;
const keys = require('../config/pusherKeys');

function activity(data){
  
  var pusher = new Pusher({
    appId: keys.pusherAppId,
    key: keys.pusherKey,
    secret: keys.pusherSecret,
    cluster: keys.pusherCluster,
    encrypted: keys.pusherEncrypted
  });

  const dataAct = {
    object_name: data.object_name,
    ProjectId: data.ProjectId,
    EventTypeId: data.EventTypeId
  }
  Activity.create(dataAct)
          .then(() => {
            Project.findOne({
                      attributes:['id'],
                      where:{
                        id: dataAct.ProjectId
                      }
                    })
                    .then(dataId => {
                      if(!dataId){
                        console.log({
                          message: 'id tidak sama',
                          data:dataId
                        });
                      }else{
                        pusher.trigger('coba', 'coba-e', {
                          points: 1,
                          object_name:dataAct.object_name,
                          ProjectId: dataId
                        });
                        console.log({
                          status: 'succes trigger',
                          message: 'pusher trigger',
                        });
                        console.log({
                          success: true,
                          message: 'id sama',
                          data: dataId
                        })
                      }
                    })
                    .catch(err => {
                      console.log({
                        error: true,
                        message: 'error findOne Project' + err
                      })
                    })
            console.log({
              status: 'succes',
              message: 'create dataAct',
              data: dataAct
            })
          })
          .catch(err => {
            console.log({
              error: true,
              message: 'error create : ' + err
            })
          })
}
// if(dataAct.EventTypeId == '1' || dataAct.EventTypeId ==  '2'){
//   console.log('data id 1 & 2');
//   pusher.trigger('button', 'button-e', {
//     points: 1,
//     object_name:dataAct.object_name
//   });
//   pusher.trigger('active', 'active-e', {
//     points: 1,
//     object_name:dataAct.object_name
//   });
//   console.log({
//     status: 'succes',
//     message: 'pusher trigger',
//     data: dataAct
//   });
//#endregion


/**
 * Listen on provided port, on all network interfaces.
 */
db.sequelize.sync().then(() => {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}