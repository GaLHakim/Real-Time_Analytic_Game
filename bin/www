#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('knex-nodejs:server');
const http = require('http');
const db = require('../models');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

//#region Socket IO
const socketIo = require('socket.io');
io = socketIo(server);

var clients = [];
io.on('connection', (socket) => {
  // console.log('web connect');
  // console.log(socket.id);
  var currentUser;
  socket.on('User Connect', () => {
    console.log('User Connect');
    for(var i = 0; i < clients.length; i++){
      // socket.emit('User Connected', {item:clients[i]});
      console.log('User Connected is ' + clients[i] , socket.id);
    }
  });

  socket.on('Action', (data) => {
    console.log(data);
    activity(data);
    currentUser = {
      item:data.object_name
    }

    clients.push(currentUser);
    socket.emit('Action', currentUser);
    socket.broadcast.emit('User Connected', currentUser);
  });

  socket.on('disconnect', () => {
    console.log('User disconnect is', socket.id);
    // socket.emit('User Disconnected', socket.id);
  });
});
//#endregion

//#region Pusher
const Pusher = require('pusher');
const Activity = require('../models').Activity;

function activity(data){
  // Activity.create({
  //   object_name: data.object_name,
  //   ip: data.ip,
  //   ProjectId: data.ProjectId,
  //   EventTypeId: data.EventTypeId
  // })
  // console.log('db ok');

  var pusher = new Pusher({
    appId: '928180',
    key: '79878da23c4fd7ff4af2',
    secret: '5e506fdd1bc265f98c16',
    cluster: 'ap1',
    encrypted: true
  });
  
  if(data.EventTypeId == '3' || data.EventTypeId ==  '4'){
    console.log('data id 3 & 4');
    pusher.trigger('button', 'button-e', {
      points: 1,
      object_name:data.object_name
    });
    console.log({
      status: 'succes',
      data: data
    });
  }else if(data.EventTypeId == '1' || data.EventTypeId ==  '2'){
    console.log('data id 1 & 2');
    pusher.trigger('active', 'active-e', {
      points: 1,
      object_name:data.object_name
    });
    console.log({
      status: 'succes',
      data: data
    });
  }
}
//#endregion


/**
 * Listen on provided port, on all network interfaces.
 */
db.sequelize.sync().then(() => {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}